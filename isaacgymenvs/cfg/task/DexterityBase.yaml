# See schema in dexterity_schema_config_base.py for descriptions of parameters.

defaults:
    - _self_
    - /dexterity_schema_config_base

mode:
    export_scene: False
    export_states: False

sim:
    dt: 0.03333333333
    num_substeps: 10  # Number of substeps has the largest impact on FPS performance. Using a very low number of substeps causes large penetrations of the robot and objects making the simulation less realistic and less stable. Increasing the number of substeps or position iterations appears to be the best remedy.
    num_pos_iters: 10
    num_vel_iters: 0
    gravity_mag: 9.81
    add_damping: False
    override_robot_com_and_inertia: True  # Whether to recompute the center of mass and inertia based on the robot body's geometry and override the values given in the XML file
    aggregate_mode: 2  # Whether to create aggregate groups 0: don't aggregate; 1: aggregate only task-specific actors; >1: aggregate all actors
    
env:
    env_spacing: 1.0
    robot: [ 'ur5e/ur5e.xml', 'schunk_sih/right_hand.xml', 'vive_tracker/tracker.xml']
    robot_depth: 0.6
    robot_friction: 1.0
    has_table: True
    table_height: 0.01
    table_friction: 0.3

ctrl:
    ctrl_type: gym_default  # {gym_default, joint_space_id}
    ik_body: tracker
    add_pose_actions_to: pose # {target, pose}
    neglect_attached_weights: True  # Whether to ignore the weights of rigid bodies attached to the robot arm, such as fingers of a robotic hand. This drastically improves the inverse kinematics.

    all:
        jacobian_type: geometric
        residual_prop_gain: 5
        residual_deriv_gain: 1
    gym_default:
        ik_method: dls
        ik_prop_gain: 100
        ik_deriv_gain: 40
        residual_prop_gain: 8
        residual_deriv_gain: 4
    joint_space_id:
        ik_method: dls
        ik_prop_gain: 40
        ik_deriv_gain: 8
        #residual_prop_gain: 0.05
        #residual_deriv_gain: 1
        residual_stiffness: 0.0
        residual_damping: 5.0
        uniform_arm_and_hand_gains: True  # Enforces gains DoFs on the arm to be equal and the ones on the hand to be equal irrespective of where the ik body is in the kinematic chain

    # For relative actions
    pos_action_scale: [ 0.1, 0.1, 0.1 ]
    rot_action_scale: [ 0.2, 0.2, 0.2 ]
    # For absolute actions
    #pos_action_scale: [ 0.5, 0.5, 0.5 ]
    #rot_action_scale: [ 1.571, 1.571, 1.571 ]

    torque_action_scale: [ 1.0, 1.0, 1.0 ]

    clamp_rot: True
    clamp_rot_thresh: 1.0e-6


    relative_pose_actions: True  # Whether the actions for the end-effector pose refer to the absolute target or are added to the current target.
    relative_residual_actions: True  # Whether the actions for the hand joint targets (e.g. finger movements) refer to the absolute target or are added to the current target.
    relative_residual_target_change_scale: 5.0

debug:
    override_target_pose: False
    # target poses are specified as [[x, y, z], [x, y, z, w], duration (ts)]
    target_poses: [
        [[0, 0, 0.6], [0, 0, 0, 1], 200], # base pose
        [[0, 0, 0.6], [0, 0, 0, 1], 200], [[0, 0, 0.5], [0.383, 0., 0., 0.924], 200], [[0, 0, 0.6], [0.707, 0., 0., 0.707], 200], [[0, 0, 0.5], [0.924, 0., 0., 0.383], 200], [[0, 0, 0.5], [0.707, 0., 0., 0.707], 200], [[0, 0, 0.6], [0.383, 0., 0., 0.924], 200], [[0, 0, 0.6], [0, 0, 0, 1], 200], [[0, 0, 0.6], [-0.383, 0., 0., 0.924], 200], [[0, 0, 0.6], [-0.707, 0., 0., 0.707], 200], [[0, 0, 0.6], [-0.924, 0., 0., 0.383], 200],   # x-axis rotation
        [[0, 0, 0.6], [0, 0, 0, 1], 200], [[0, 0, 0.6], [0., 0.383, 0., 0.924], 200], [[0, 0, 0.6], [0., 0.707, 0., 0.707], 200], [[0, 0, 0.6], [0., 0.924, 0., 0.383], 200], [[0, 0, 0.6], [0., 0.707, 0., 0.707], 200], [[0, 0, 0.6], [0., 0.383, 0., 0.924], 200], [[0, 0, 0.6], [0, 0, 0, 1], 200], [[0, 0, 0.6], [0., -0.383, 0., 0.924], 200], [[0, 0, 0.6], [0., -0.707, 0., 0.707], 200], [[0, 0, 0.6], [0., -0.924, 0., 0.383], 200],   # y-axis rotation
        [[0, 0, 0.6], [0, 0, 0, 1], 200], [[0, 0, 0.6], [0., 0., 0.383, 0.924], 200], [[0, 0, 0.6], [0., 0., 0.707, 0.707], 200], [[0, 0, 0.6], [0., 0., 0.924, 0.383], 200], [[0, 0, 0.6], [0., 0., 0.707, 0.707], 200], [[0, 0, 0.6], [0., 0., 0.383, 0.924], 200], [[0, 0, 0.6], [0, 0, 0, 1], 200], [[0, 0, 0.6], [0., 0., -0.383, 0.924], 200], [[0, 0, 0.6], [0., 0., -0.707, 0.707], 200], [[0, 0, 0.6], [0., 0., -0.924, 0.383], 200],   # z-axis rotation
    ]

    override_residual_dof_target: False
    # residual dof targets are specified as [[q0, ..., qn], duration (ts)]
    residual_dof_targets: [
        [[-1, -1., 0., 0., 0.], 350],
        [[1, -1., 0., 0., 0.], 200],
        [[1, -1., 1., 0., 0.], 200]
    ]

    save_videos: True  # Saves all camera observations to mp4 if cameras are used in the environment

    verbose: True
    visualize: ['hand_bodies_demo_pose'] # ['ik_body_pose', 'hand_bodies_demo_pose', 'ik_body_demo_pose', 'pre_grasp_pose'] #['ik_body_pose', 'pre_grasp_pose', 'ik_body_demo_pose' ] # ['hand_bodies_pose', 'hand_bodies_demo_pose']

# Specifies data to be logged in addition the data logged by default through
# rl-games. dexterity environments check for the keys in logging (e.g.
# 'reward_components', 'success_rate_ewma') to decide what has to be logged.
# Parameters that influence the logging behavior, such as the weight alpha in
# the EWMA of the success rate can be specified in a sub-dictionary of that
# logging key.
logging:
    reward_terms: ""
    success_rate_ewma:
        alpha: 0.05
